C51 COMPILER V9.60.0.0   DEVICE_FUNC                                                       09/15/2022 16:59:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DEVICE_FUNC
OBJECT MODULE PLACED IN .\Objects\Device_Func.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Device_Func.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\Device_Func.lst) TABS(2) OBJECT(.\Objects\Device_Func.obj)

line level    source

   1          #include <MYHEADER.h>
   2          
   3          void Ports_Init() {
   4   1        P1 = 0x00; // OUTPUT PORT
   5   1        // P2 = 0x00; // OUTPUT PORT
   6   1        P2 = 0xFF; // INPUT PORT
   7   1        P0 = 0xFF; // INPUT PORT
   8   1        Port3_Init();
   9   1      }
  10          
  11          /********* UART Int ***************/
  12          void Int_Uart() {
  13   1        // TMOD = 0x20; //use timer 1, 8 bit auto reload
  14   1        TMOD = 0x21; //sets the mode1 of Timer0 used for timing & sets the mode2 of Timer1 used for timing
  15   1        SCON = 0x50; // Mode 1, reception enable 
  16   1        PCON = 0x80; //enable SMOD register
  17   1        TH1 = 0xFD; //19600 baud rate
  18   1        TR1 = 1; //start timer for baud rate generate
  19   1        ES = 1; // enable serial interrupt
  20   1        EA = 1; // enable global interrupt bit
  21   1      
  22   1        /*********Timer0 Enable***********/
  23   1        TH0 = 0x4B; // LOAD THE TIMER VALUE
  24   1        TL0 = 0xFD;
  25   1        TR0 = 1; // ENABLE TIMER0 INTERRUPT
  26   1        ET0 = 1;
  27   1      }
  28          
  29          /******** TX Char ****************/
  30          void Tx_char(unsigned char Tx_Data) {
  31   1        SBUF = Tx_Data;
  32   1        while (TI == 0);
  33   1        TI = 0;
  34   1      }
  35          
  36          /*********TX STRING***************/
  37          void Tx_string(unsigned char * get_data) {
  38   1        unsigned int addr = 0;
  39   1        while ( * (get_data + addr) != '\0') {
  40   2          Tx_char( * (get_data + addr));
  41   2          addr++;
  42   2        }
  43   1      }
  44          
  45          /******** RX Char ****************/
  46          //unsigned char Rx_char()
  47          //{
  48          //  unsigned char Rx_Data;
  49          //  while(RI == 0);
  50          //  Rx_Data = SBUF;
  51          //  RI = 0;
  52          //  return(Rx_Data);
  53          //}
  54          
C51 COMPILER V9.60.0.0   DEVICE_FUNC                                                       09/15/2022 16:59:49 PAGE 2   

  55          /********PORT 3 init***************/ //DON'T REMOVE. IF REMOVE SERIAL WILL NOT WORK
  56          void Port3_Init() {
  57   1        /********input***********/
  58   1        //  PORT3_PIN2 = 1;
  59   1        //  PORT3_PIN3 = 1;
  60   1        //  PORT3_PIN4 = 1;
  61   1        //  PORT3_PIN5 = 1;
  62   1        //  PORT3_PIN6 = 1;
  63   1        //  PORT3_PIN7 = 1;
  64   1        /******OUTPUT******/
  65   1        PORT3_PIN2 = 0;
  66   1        PORT3_PIN3 = 0;
  67   1        PORT3_PIN4 = 0;
  68   1        PORT3_PIN5 = 0;
  69   1        PORT3_PIN6 = 0;
  70   1        PORT3_PIN7 = 0;
  71   1        //PORT3_PIN5 = 0;
  72   1        //PORT3_PIN6 = 0;
  73   1        //PORT3_PIN7 = 0;
  74   1      }
  75          
  76          void Delay(unsigned int itime) {
  77   1        unsigned int i, j;
  78   1        for (i = 0; i < itime; i++) // this is For(); loop delay used to define delay value in Embedded C
  79   1        {
  80   2          for (j = 0; j < 1275; j++);
  81   2        }
  82   1      }
  83          
  84          /**************** check the port 3 pin status individually  ****************************/
  85          unsigned char PORT3_func() {
  86   1      
  87   1        unsigned char PORT3 = 0x00;
  88   1        //  if (PORT3_PIN0 == 0)
  89   1        //    PORT3 = PORT3 | 0x01; 
  90   1        //  else
  91   1        //    PORT3 = PORT3 & 0xFF;
  92   1        //  if (PORT3_PIN1 == 0)
  93   1        //    PORT3 = PORT3 | 0x02; 
  94   1        //  else
  95   1        //    PORT3 = PORT3 & 0xFF;
  96   1        PORT3 = PORT3 | 0x03;
  97   1        if (PORT3_PIN2 == 0)
  98   1          PORT3 |= 0x04;
  99   1        else
 100   1          PORT3 &= 0xFF;
 101   1        if (PORT3_PIN3 == 0)
 102   1          PORT3 |= 0x08;
 103   1        else
 104   1          PORT3 = PORT3 & 0xFF;
 105   1        if (PORT3_PIN4 == 0)
 106   1          PORT3 |= 0x10;
 107   1        else
 108   1          PORT3 = PORT3 & 0xFF;
 109   1        if (PORT3_PIN5 == 0)
 110   1          PORT3 |= 0x20;
 111   1        else
 112   1          PORT3 &= 0xFF;
 113   1        if (PORT3_PIN6 == 0)
 114   1          PORT3 |= 0x40;
 115   1        else
 116   1          PORT3 &= 0xFF;
C51 COMPILER V9.60.0.0   DEVICE_FUNC                                                       09/15/2022 16:59:49 PAGE 3   

 117   1        if (PORT3_PIN7 == 0)
 118   1          PORT3 |= 0x80;
 119   1        else
 120   1          PORT3 &= 0xFF;
 121   1      
 122   1        return PORT3;
 123   1      }
 124          //-----------------transmit section--------------//
 125          void Transmit_Data() {
 126   1        TX_Data[0] = IDENTITY_BYTE;
 127   1        TX_Data[1] = START_BYTE;
 128   1        TX_Data[2] = ~P0;
 129   1        TX_Data[3] = ~P2;
 130   1        TX_Data[4] = TX_CHECKSUM(TX_Data[2], TX_Data[3]);
 131   1        TX_Data[5] = END_BYTE;
 132   1        Tx_char(TX_Data[0]);
 133   1        Tx_char(TX_Data[1]);
 134   1        Tx_char(TX_Data[2]);
 135   1        Tx_char(TX_Data[3]);
 136   1        Tx_char(TX_Data[4]);
 137   1        Tx_char(TX_Data[5]);
 138   1      }
 139          /*
 140              7 6 5 4 3 2 1 0 - pin
 141              8 4 2 1 8 4 2 1- bit
 142          */
 143          void Rx_012Bit(UINT8 *Rx_data2) //Checking 0,1,2 bits
 144          {
 145   1        if (((*Rx_data2 & 0x01) == 0) && ((*Rx_data2 & 0x02) == 0) && ((*Rx_data2 & 0x04) == 0x04)) {
 146   2          //return ~(0x00); //6th bit low & 7th bit low
 147   2          PORT3_PIN3 = 1;//RLG3_STS2
 148   2          PORT3_PIN2 = 1;//RLG3_STS1
 149   2        } else if (((*Rx_data2 & 0x01) == 0x01) && ((*Rx_data2 & 0x02) == 0) && ((*Rx_data2 & 0x04) == 0)) {
 150   2          //return ~(0x40); // 6th bit high & 7th bit low
 151   2          PORT3_PIN3 = 0;
 152   2          PORT3_PIN2 = 1;
 153   2        } else if (((*Rx_data2 & 0x01) == 0) && ((*Rx_data2 & 0x02) == 0x02) && ((*Rx_data2 & 0x04) == 0)) {
 154   2          //return ~(0x80); // 6th bit low & 7th bit high
 155   2          PORT3_PIN3 = 1;
 156   2          PORT3_PIN2 = 0;
 157   2        } else if (((*Rx_data2 & 0x01) == 0x01) && ((*Rx_data2 & 0x02) == 0x02) && ((*Rx_data2 & 0x04) == 0)) {
 158   2          //return ~(0xC0); // 6th bit high & 7th bit high
 159   2          PORT3_PIN3 = 0;
 160   2          PORT3_PIN2 = 0;
 161   2        } else {
 162   2          PORT3_PIN3 = 1;
 163   2          PORT3_PIN2 = 1;
 164   2          //return ~(0x00); //6th bit low & 7th bit low
 165   2        }
 166   1      }
 167          
 168          void Rx_345Bit(UINT8 *Rx_data3) //Checking 3,4,5 bits 
 169          {
 170   1        //  UINT8 _port3;
 171   1        if (((*Rx_data3 & 0x08) == 0) && ((*Rx_data3 & 0x10) == 0) && ((*Rx_data3 & 0x20) == 0x20)) {
 172   2          //_port3=(0x00); //2th bit low & 3th bit low
 173   2          PORT3_PIN4 = 1;//RLG4_STS1
 174   2          PORT3_PIN5 = 1;//RLG4_STS2
 175   2        } else if (((*Rx_data3 & 0x08) == 0x08) && ((*Rx_data3 & 0x10) == 0) && ((*Rx_data3 & 0x20) == 0)) {
 176   2          //_port3=(0x04); //2th bit high & 3th bit low
 177   2          PORT3_PIN4 = 0;
 178   2          PORT3_PIN5 = 1;
C51 COMPILER V9.60.0.0   DEVICE_FUNC                                                       09/15/2022 16:59:49 PAGE 4   

 179   2        } else if (((*Rx_data3 & 0x08) == 0) && ((*Rx_data3 & 0x10) == 0x10) && ((*Rx_data3 & 0x20) == 0)) {
 180   2          //_port3=(0x08); //2th bit low & 3th bit high
 181   2          PORT3_PIN4 = 1;
 182   2          PORT3_PIN5 = 0;
 183   2        } else if (((*Rx_data3 & 0x08) == 0x08) && ((*Rx_data3 & 0x10) == 0x10) && ((*Rx_data3 & 0x20) == 0)) {
 184   2          //_port3=(0x0C); //2th bit high & 3th bit high
 185   2          PORT3_PIN4 = 0;
 186   2          PORT3_PIN5 = 0;
 187   2        } else {
 188   2          //_port3=(0x00);
 189   2          PORT3_PIN4 = 1;
 190   2          PORT3_PIN5 = 1;
 191   2        }
 192   1        //(Rx_data4>=3)&&(_port3=_port3|0x10)||_port3;
 193   1        //(Rx_data4>=3)&&(PORT3_PIN4=0)||(PORT3_PIN4=1);
 194   1      }
 195          
 196          void Received_Data() {
 197   1        if (RX_Data[0] == IDENTITY_BYTE) {
 198   2          if (RX_Data[1] == START_BYTE) {
 199   3            unsigned char temp = RX5B_CHECKSUM(RX_Data[2], RX_Data[3]);
 200   3            if ((RX_Data[4] == temp) && (RX_Data[5] == END_BYTE)) {
 201   4              P1=~RX_Data[2];
 202   4              temp=~RX_Data[2];
 203   4              Rx_012Bit(&temp); 
 204   4              Rx_345Bit(&temp);
 205   4            //  if(RX_Data[4]>=3)
 206   4              //  (PORT3_PIN6=0);
 207   4              //else
 208   4                //(PORT3_PIN6=1);
 209   4            }// else {
 210   3              //RX_Index=0;
 211   3              //Tx_string("WRONG CHECKSUM or END_BYTE");
 212   3              //memset(RX_Data, '\0', 7 * sizeof(char));
 213   3            //}
 214   3          } //else {
 215   2            //RX_Index=0;
 216   2            //Tx_string("WRONG START_BYTE");
 217   2            //memset(RX_Data, '\0', 7 * sizeof(char));
 218   2          //}
 219   2        } //else {
 220   1          //RX_Index=0;
 221   1          //Tx_string("IDENTITY WRONG");
 222   1          //memset(RX_Data, '\0', 7 * sizeof(char));
 223   1        //}
 224   1      }
 225          void cli()
 226          {
 227   1         ES = 0; // disable interrupt bit
 228   1      }
 229          void sei()
 230          {
 231   1        ES = 1; // enable interrupt bit
 232   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    506    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
C51 COMPILER V9.60.0.0   DEVICE_FUNC                                                       09/15/2022 16:59:49 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
